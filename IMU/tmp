    if meas_type == 'acc':
        sensor_full_name =  'Accelerometer'
        if ACCELERATION_UNIT_FOR_NOISE == 'm/s²':
            scale_meas_psd = 1
            meas_noise_density_unit = 'm/s²/sqrt(Hz)'
            meas_ylabel = r'Spectral Density ($m/s²  / \sqrt{Hz}$)'
        elif ACCELERATION_UNIT_FOR_NOISE == 'ug':
            scale_meas_psd = MS2_TO_MICROG
            meas_noise_density_unit = r'Spectral Density  $\mu g  / \sqrt{Hz}$'# 'ug/sqrt(Hz)'
            meas_ylabel = r'Spectral Density  $\mu g  / \sqrt{Hz}$'
    if meas_type == 'gyro':
        sensor_full_name =  'Gyroscope'
        if ANGLE_UNIT_FOR_NOISE == 'rad':
            scale_meas_psd = 1
            meas_noise_density_unit = 'rad/s/sqrt(Hz)'
            meas_ylabel = r'Spectral Density ($rad/s  / \sqrt{Hz}$)'
        elif ANGLE_UNIT_FOR_NOISE == 'deg':
            scale_meas_psd = RAD_2_DEG
            meas_noise_density_unit = '°/s/sqrt(Hz)'
            meas_ylabel = r'Spectral Density ($°/s  / \sqrt{Hz}$)'
    print(f'Noise densities (N, acc_n / gyro_n) from PSD for {MEAS_FILENAME_NO_EXT}')
    

    freqax, psdax = signal.welch(measx, fs_actual, nperseg=1024, scaling='density')  
    freqay, psday = signal.welch(measy, fs_actual, nperseg=1024, scaling='density')  
    freqaz, psdaz = signal.welch(measz, fs_actual, nperseg=1024, scaling='density')  
    
    # scale depending on target units
    psdax = np.sqrt(psdax) * scale_meas_psd
    psday = np.sqrt(psday) * scale_meas_psd
    psdaz = np.sqrt(psdaz) * scale_meas_psd
    
    # Compute noise spectral densities
    ndax = np.mean(psdax)
    nday = np.mean(psday)
    ndaz = np.mean(psdaz)
    print(f'{meas_type}X Noise Density: {ndax:.{PRECI}{TYPE}} {meas_noise_density_unit}')
    print(f'{meas_type}Y Noise Density: {nday:.{PRECI}{TYPE}} {meas_noise_density_unit}')
    print(f'{meas_type}Z Noise Density: {ndaz:.{PRECI}{TYPE}} {meas_noise_density_unit}')
    
    
    # Plot measel. data
    plt.figure()
    plt.plot(freqax, psdax, label='x')
    plt.plot(freqay, psday, label='y')
    plt.plot(freqaz, psdaz, label='z')
    plt.title(f'sensor_full_name} Power Spectral Density')
    plt.xlabel('Frequency [Hz]')
    plt.ylabel(meas_ylabel)
    plt.legend()
    plt.grid()
    if SAVE_FIG:
        figname = f'{meas_type}_PSD_Welch_{FIG_FILENAME_BASE}.{FIG_FMT}'
        plt.savefig(figname)
        print(f'figure saved to {figname}')
    
    plt.show()
